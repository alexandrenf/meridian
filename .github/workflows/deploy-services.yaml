name: Deploy services
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9.15.4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check Git status before generating migrations
        run: git status --porcelain
        id: pre_migration_status
        working-directory: 'packages/database'

      - name: Generate migrations
        run: pnpm generate
        working-directory: 'packages/database'

      - name: Check if new migrations were created
        id: check_migrations
        run: |
          git status --porcelain
          if [[ $(git status --porcelain | grep -E "^\?\?" | wc -l) -gt 0 ]]; then
            echo "New migration files were created during CI. Please run 'pnpm generate' locally and commit the changes."
            echo "new_files=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          if [[ $(git status --porcelain | grep -E "^M" | wc -l) -gt 0 ]]; then
            echo "Existing migration files were modified during CI. Please run 'pnpm generate' locally and commit the changes."
            echo "modified_files=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "No new or modified migration files detected."
        working-directory: 'packages/database'

      - name: Run database migrations
        run: pnpm db:migrate
        working-directory: 'packages/database'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build & Deploy Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          packageManager: pnpm
          workingDirectory: 'apps/scrapers'
          environment: production
          secrets: |
            DATABASE_URL
            MERIDIAN_SECRET_KEY
            OPENROUTER_API_KEY
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          MERIDIAN_SECRET_KEY: ${{ secrets.MERIDIAN_SECRET_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}